name: AI-Enhanced CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: genairegistry.azurecr.io
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

jobs:
  ai-code-analysis:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install openai azure-identity
      
      - name: AI Code Review
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python .github/scripts/ai-code-review.py

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python, javascript
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  quality-gate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build-and-test:
    runs-on: ubuntu-latest
    needs: [ai-code-analysis, security-scan]
    steps:
      - uses: actions/checkout@v4
      
      - name: Build Docker images
        run: |
          docker build -f docker/Dockerfile.python -t test-python .
          docker build -f docker/Dockerfile.nodejs -t test-nodejs .
      
      - name: Run tests
        run: |
          docker run --rm test-python pytest
          docker run --rm test-nodejs npm test

  ai-deployment-decision:
    runs-on: ubuntu-latest
    needs: build-and-test
    outputs:
      strategy: ${{ steps.ai-decision.outputs.strategy }}
      risk-score: ${{ steps.ai-decision.outputs.risk-score }}
    steps:
      - uses: actions/checkout@v4
      
      - name: AI Deployment Decision
        id: ai-decision
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python scripts/ai-agents/deployment-decision.py
          echo "strategy=$(cat deployment-strategy.txt)" >> $GITHUB_OUTPUT
          echo "risk-score=$(cat risk-score.txt)" >> $GITHUB_OUTPUT

  deploy-staging:
    runs-on: ubuntu-latest
    needs: ai-deployment-decision
    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v4
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Deploy with AI-recommended strategy
        run: |
          echo "Deploying with strategy: ${{ needs.ai-deployment-decision.outputs.strategy }}"
          ./scripts/deployment/deploy-${{ needs.ai-deployment-decision.outputs.strategy }}.sh

  deploy-production:
    runs-on: ubuntu-latest
    needs: ai-deployment-decision
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Production Deployment
        run: |
          echo "Production deployment with risk score: ${{ needs.ai-deployment-decision.outputs.risk-score }}"
          ./scripts/deployment/production-deploy.sh